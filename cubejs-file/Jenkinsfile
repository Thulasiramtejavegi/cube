pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = 'dockerhub'   // Jenkins credentials ID for Docker Hub
        SONARQUBE_CREDENTIALS_ID = 'sonarqube-token' // Jenkins credentials ID for SonarQube token
        GIT_CREDENTIALS_ID = 'github-token'  // Jenkins credentials ID for GitHub token
        DOCKER_IMAGE_NAME = 'thulasiramteja/cubejs-app' // Docker Hub repository name
        DOCKER_IMAGE_TAG = 'latest'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install --legacy-peer-deps'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('SonarQube') {
                        sh 'npm run test' // Replace with Cube.js-specific tests if applicable
                        sh 'sonar-scanner \
                            -Dsonar.projectKey=cubejs \
                            -Dsonar.sources=. \
                            -Dsonar.host.url=$SONAR_HOST_URL \
                            -Dsonar.login=$SONARQUBE_TOKEN'
                    }
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    docker.withRegistry('', DOCKER_CREDENTIALS_ID) {
                        sh """
                        docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} .
                        docker push ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}
                        """
                    }
                }
            }
        }

        stage('Update Kubernetes Manifest') {
            steps {
                script {
                    def manifestFile = 'deployment.yaml' // Path to your deployment.yaml file
                    sh """
                    sed -i 's|image: .*|image: ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}|' ${manifestFile}
                    """
                    git credentialsId: GIT_CREDENTIALS_ID, url: 'https://github.com/your-github-repo'
                    sh """
                    git add ${manifestFile}
                    git commit -m "Updated deployment manifest with image ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                    git push
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}

